#include "ppu-protocol-local.h"
#include "../pins.h"
#include <stdio.h>


unsigned char YUV[192] = {
	0x66, 0x66, 0x66, 0x00, 0x2a, 0x88, 0x14, 0x12, 
	0xa7, 0x3b, 0x00, 0xa4, 0x5c, 0x00, 0x7e, 0x6e, 
	0x00, 0x40, 0x6c, 0x07, 0x00, 0x56, 0x1d, 0x00, 
	0x33, 0x35, 0x00, 0x0c, 0x48, 0x00, 0x00, 0x52, 
	0x00, 0x00, 0x4f, 0x08, 0x00, 0x40, 0x4d, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xad, 0xad, 0xad, 0x15, 0x5f, 0xd9, 0x42, 0x40, 
	0xff, 0x75, 0x27, 0xfe, 0xa0, 0x1a, 0xcc, 0xb7, 
	0x1e, 0x7b, 0xb5, 0x31, 0x20, 0x99, 0x4e, 0x00, 
	0x6b, 0x6d, 0x00, 0x38, 0x87, 0x00, 0x0d, 0x93, 
	0x00, 0x00, 0x8f, 0x32, 0x00, 0x7c, 0x8d, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xff, 0xff, 0xff, 0x64, 0xb0, 0xff, 0x92, 0x90, 
	0xff, 0xc6, 0x76, 0xff, 0xf2, 0x6a, 0xff, 0xff, 
	0x6e, 0xcc, 0xff, 0x81, 0x70, 0xea, 0x9e, 0x22, 
	0xbc, 0xbe, 0x00, 0x88, 0xd8, 0x00, 0x5c, 0xe4, 
	0x30, 0x45, 0xe0, 0x82, 0x48, 0xcd, 0xde, 0x4f, 
	0x4f, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xff, 0xff, 0xff, 0xc0, 0xdf, 0xff, 0xd3, 0xd2, 
	0xff, 0xe8, 0xc8, 0xff, 0xfa, 0xc2, 0xff, 0xff, 
	0xc4, 0xea, 0xff, 0xcc, 0xc5, 0xf7, 0xd8, 0xa5, 
	0xe4, 0xe5, 0x94, 0xcf, 0xef, 0x96, 0xbd, 0xf4, 
	0xab, 0xb3, 0xf3, 0xcc, 0xb5, 0xeb, 0xf2, 0xb8, 
	0xb8, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};


int main(int argc, char** argv) {

    ppuAddr(0x3F00);
    for(uint8_t x = 0; x < 2; x++) {
        for(uint8_t y = 0; y < 16; y++) {
            ppuDataWrite(y);
        }
    }

  	ppuAddr(0x2000);
    for(uint8_t y = 16; y > 0; y--) {
        for(uint8_t x = 0; x < 255; x++) {
            ppuDataWrite(0);
        }
    }

    ppuCtrl(0x80);
    ppuMask(0b00011110);

    FILE* f = fopen("../tests/ppu-color-test/test.chr", "rb");
    fread(chr, 0x1000, 1, f);
    fclose(f);

    // f = fopen("chr.ppm", "w+");
    // fprintf(f, "P3\n128 128 3\n");

    // for(int sprite_y = 0; sprite_y < 16; sprite_y++) {
    //     for(int y = 0; y < 8; y++) {
    //         for(int sprite_x = 0; sprite_x < 16; sprite_x++) {
    //             uint8_t* sprite = chr + (sprite_y * 16 + sprite_x) * 16;
    //             for(int x = 0; x < 8; x++) {
    //                 uint8_t color = (sprite[y] >> (7-x) & 1) << 1 | (sprite[y + 8] >> (7-x) & 1);
    //                 fprintf(f, "%d %d %d\t", color, color, color);
    //             }
    //         }
    //     }
    //     fprintf(f, "\n");
    // }
    // fclose(f);

    for (int attr = 0; attr < 8; attr++) {
        for(int base_tile = 0; base_tile < 4; base_tile++) {
            uint8_t oam_fill[256];

            for(int y = 0; y<8; y++) {
                for(int x = 0; x<8; x++) {
                    uint8_t tile = (y*8 + x);
                    uint8_t* oam_tile = oam_fill + tile*4;
                    oam_tile[0] = y*8;
                    oam_tile[1] = tile + base_tile*64;
                    oam_tile[2] = attr < 4 ? attr : ((attr - 4) << 6);
                    oam_tile[3] = x*8;
                }        
            }

            oamDma(oam_fill, 256);

            char filename[16];
            sprintf(filename, "oamtest%d%d.ppm", base_tile, attr);

            f = fopen(filename, "w+");
            fprintf(f, "P3\n256 240 15\n");
            uint8_t line_buffer[256];
            
            for (int y = 0; y < 240; y++) {
                nes_ppu_scanline(line_buffer, y);

                for (int x = 0; x < 256; x++) {
                    uint8_t * rgb = YUV + line_buffer[x] * 3;
                    // fprintf(f, "%03d %03d %03d\t", rgb[0], rgb[1], rgb[2]);
                    fprintf(f, "%03d %03d %03d\t", line_buffer[x], line_buffer[x], line_buffer[x]);
                }
                fprintf(f, "\n");
            }

            fclose(f);
        }
    }

    return 0;
}

